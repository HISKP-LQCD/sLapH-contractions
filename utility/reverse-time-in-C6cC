#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright © 2019 Martin Ueding <dev@martin-ueding.de>

import argparse
import collections

import h5py
import numpy as np


def main():
    options = _parse_args()

    for path in options.path:
        process_path(path, options.dry)


def process_path(path, dry):
    print(path)

    stats = collections.defaultdict(lambda: 0)

    mode = 'r' if dry else 'r+'
    with h5py.File(path, mode) as f:
        # The time extent is the same for every correlator. Therefore we just
        # need an index array once.
        time_extent = len(f[list(f.keys())[0]])
        iti = inverse_time_indices(time_extent)

        print('  Time extent T = {}.'.format(time_extent))
        print('  Time index array: {}.'.format(str(iti)))

        for key in f.keys():
            # The only affected diagram is the C6cC, therefore we do not want
            # to touch anything else.
            if not key.startswith('C6cC_'):
                stats['not C6cC'] += 1
                continue

            is_reversed = f[key].attrs.get('reversed', False)
            if is_reversed:
                stats['already reversed'] += 1
                continue

            data = f[key].__array__()
            f[key][...] = data[iti]
            f[key].attrs['reversed'] = True
            stats['now reversed'] += 1

    print('  Stats:')
    for key, value in stats.items():
        print('    {:6d} {}'.format(value, key))
    print()


def inverse_time_indices(time_extent):
    '''
    Gives the inverse time indices to use as array indices.

    We start with indices 0, …, T-1 and need to make sure that time slice 0
    stays as the first. So we want to have 0, T-1, T-2, …, 1 in the end.
    '''
    return np.array([0] + list(range(time_extent - 1, 0, -1)))



def _parse_args():
    parser = argparse.ArgumentParser(description='Reverses the time in C6cC correlators')
    parser.add_argument('path', nargs='+', help='Path to HDF5 file containing C6cC correlators')
    parser.add_argument('--dry', action='store_true', help='Do not change files')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
