#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright Â© 2019 Martin Ueding <dev@martin-ueding.de>

import argparse
import json
import math
import os
import subprocess

import jinja2


def main():
    options = _parse_args()

    with open(options.profile) as f:
        profile = json.load(f)

    env = jinja2.Environment(loader=jinja2.FileSystemLoader(
        os.path.dirname(os.path.abspath(__file__))))
    template = env.get_template('profile.dot.j2')

    tottime = profile['nodes'][0]['cumtime']

    for i, node in enumerate(profile['nodes']):
        profile['nodes'][i]['hue'] = '{:.4f}'.format(250/360 * (1 - math.pow(node['cumtime'] / tottime, 0.5)))

    rendered = template.render(vertices=profile['nodes'], edges=profile['edges'], tottime=tottime)
    print('Generated graph.')

    with open('profile.dot', 'w') as f:
        f.write(rendered)
    print('Wrote graph.')

    for format in ['pdf', 'png']:
        for engine in ['dot', 'circo', 'twopi', 'neato']:
            subprocess.run([
                engine, 'profile.dot',
                '-T{}'.format(format),
                '-o', 'profile-{}.{}'.format(engine, format)
            ])
            print('Compiled graph with {} to {}.'.format(engine, format))


def _parse_args():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('profile')
    options = parser.parse_args()

    return options

if __name__ == '__main__':
    main()
