%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 182.000000 1536.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 182 1536
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 182 1536
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /e put
dup 35 /r put
dup 36 /a put
dup 37 /m put
dup 38 /b put
dup 39 /u put
dup 40 /l put
dup 41 /t put
dup 42 /o put
dup 43 /C put
dup 44 /s put
dup 45 /R put
dup 46 /n put
dup 47 /d put
dup 48 /v put
dup 49 /c put
dup 50 /G put
dup 51 /D put
dup 52 /colon put
dup 53 /underscore put
dup 54 /p put
dup 55 /O put
dup 56 /F put
dup 57 /M put
dup 58 /Q put
dup 59 /k put
dup 60 /i put
dup 61 /I put
dup 62 /f put
dup 63 /space put
dup 64 /g put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C700020053000000C20205000300070037BA0001000200032BB8000110B8000210B80004D0B8000110B80006D000BA0004000500032BB8000410BA0001000000032BB800011030311335231511153335C26F6F01966F6FFED96F6F00000001002BFFF002AA02DB0025006DBA001E000B00032BB8001E10411B0006001E0016001E0026001E0036001E0046001E0056001E0066001E0076001E0086001E0096001E00A6001E00B6001E00C6001E000D5D410500D5001E00E5001E00025D00BA0019001000032BB8001910BA0006002300032BB8000610303101332E0323220E0215141E0233323637230E0323222E0235343E0233321602445F08344E6438527F552C29527C53899E0E5F031E35492F405C3B1C1C3B5B404B6D01F339573A1E3B66894E4E88643996872C4C371F30516D3D386851304C0000000002004E0000029A02CA000E0019007DB8001B2FBA0001000F00032BB8000110B8001B10B80016DCB80007DC410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5D00BA0000001000032BB8000010BA000F000100032BB8000F103031371133321E0215140E0423031133323E0235342623ADA0425A39191B2A35363010FDF559825428B2A550022A25476540425D3E241305027AFD36325F8B5AACA80000000001004E0000022302CA0009002FBA0007000000032BB8000710B80002D000B800012FBA0000000700032BB8000010BA0006000300032BB80006103031131133112135213521354E5F0148FEB8017602CAFD36014750E3500001002BFFF002B902DB002C00A1B8002D2FBA0002000000032BB8000210B8000010B80006D0B8002D10B80025D0B800252FB800


1416333237270E0515141E0233323E0235020A16272127235D36233F2E1B1E313F21233F301C152129143648035502243C4D2C2345382207140B0F8A1034393A2E1D111B24142A3C2612020D252A2A25102237272C3823120607070D19181C2212062939304229120A1F382DFEF61E1C05C70C0B0709142520151D12081723291200000000020043FFF5022D02CA0018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800002FBA001E000900032BB8001E10BA0013002800032BB8001310303113113335331E0333323E0235342E0223220607231101140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D271302CAFD3645171F12082A49623737624B2C272B010BFE3D264838222136472624463722203645000000010024FFF501FA021100230079BA001C000B00032BB8001C10411B0006001C0016001C0026001C0036001C0046001C0056001C0066001C0076001C0086001C0096001C00A6001C00B6001C00C6001C000D5D410500D5001C00E5001C00025D00BA0017001000032BB8001710BA0006002100032BB8000610B80000DCB8001010B80014DC303101332E0323220E0215141E0233323637230E0123222E0235343E02333216019F5805263B4D2C3D5C3D1E1F3D5B3B63730E5708473F283A241110253E2E3640015F2E432C152B4B653A3A61462668603C4220354424274938223600000000020024FFF5020E02CA0013002C00BBB8002D2FBA0015001600032BB8001510B8002D10B80022D0B800222FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8001610B8000AD0B8000A2FB8001610B80018D0B800182FB8001610B8002AD0B8002A2FBA002B00220015111239B8001610B8002CD000B800152FBA000F002700032BB8000F10BA001D000500032BB8001D10303137343E0233321E0215140E0223222E0205112311232E0323220E0215141E023332363733157E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645DA02CAFEF6171F13082B49623737624A2C262B46000000020024FFF502030211000A0026005BBA0014001F00032BB8001410BA0015000000032BB8001510B8001410
B80001D0B8000010B8000CD0B8000C2F00BA000F002400032BB8000F10BA001A000600032BB8001A10BA0001001400032BB8000110B8002410B8000CDC303101213E0333321E0217230E0123222E023721362E0223220E02151E0333323601A7FED702162635212035271754540B45362A3E28120101830215375B4535594124021F3E5B3E587401341E352817172736AE33321C2F3D222F6858392848623B3B644828580001000C0000012902D20017004FBA0003000000032BB8000310B80006D0B8000010B8000DDCB8000010B80014D000B800012FBA0011000A00032BB8001110BA0015000000032BB8001510B8000010B80003D0B8001510B80005D030311311331133352335343633321617352E012322061D01231563556464221F0B1A0B0C1F0C46495701BAFE4601BA4B48221803044A0404413F4D4B0000020024FF2F01FE02110028003C00BDBA002E000C00032BB8002E10BA0001000200032BB8000110B8000210B80038D0B800382FBA000400020038111239B8000210B80015D0411B0006002E0016002E0026002E0036002E0046002E0056002E0066002E0076002E0086002E0096002E00A6002E00B6002E00C6002E000D5D410500D5002E00E5002E00025DBA0021000C002E111239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F203542222448392300000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB020500000100450000020702CA000B0033BA000B000000032BB8000B10B80002D000B800012FB800052FB800002FBA000800010000111239BA000A000100001112393031131133353713330337230711455550B16CDCCD72EC02CAFD36C44AFEF20149BCE201A7000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA00000000010040000003150211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D4103008F000D00015D41030020000D00015D410300B0000D00015DB80010DCB80018DC4103008F001800015D4103005F001800015D41030020001800015D410300B0001800015DB8001BDCBA00


023E002400DE00450207004500DE004503550040022C0040023E002402510043014D003D01F4001F013B0009022C004001F4000E04BE0037000000480048007600E4014C017802080222026C030C0374042804B804CA05D4066C06DE077C07E4083008E2090C093E095809F20A3A0ADA0B720BA00C440C960CE60D060D3C00000001000000220096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 34 dict dup begin
/.notdef 0 def
/space 1 def
/colon 2 def
/C 3 def
/D 4 def
/F 5 def
/G 6 def
/I 7 def
/M 8 def
/O 9 def
/P 10 def
/Q 11 def
/R 12 def
/underscore 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/f 19 def
/g 20 def
/i 21 def
/k 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/v 32 def
/uni2B91 33 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9315F0017FC3864FF8D40C74661F4AC4F359AB40455CCBD4B88F0CECF0FBBCE3D81E443BF2B3BDABA64DE646528D274216E141CC2BD3049E9F7D1A996BC56CAFBBBB18F69063033C6B97D9FB89E146ACD1A18BD717F52681A976D83447D96DD3627801822CD048F836E7E3C11C2245B05E3EFAADFF67F4C100D7FA74AE4A5B619CB1557507D1210070627E8110B1D891C048BE55544FDD0A1F2E1CBF435B1EA67CD73514E189AD95CA96206D2172C64FCE256F7714F2C65B7719B76E6BC17DD1C0221C55E6F5888D0F059C85B02C5E82FECD05D550FEBDCF9A02D56EFED58C1D2897D27FE3610C9F4B06517829765C3EF974016C110EB3B0BF94FEE8E977BF3B7A2D5C07D36D296A544EA498264A277B8C79060813330E041BC3F168199932048D59A615F4BEF29331E0332C0125B4A56B30B994D0BF80D7133C19490FCD7D60D650E4091F98A999553EC30BD013C7A94F27A64863158A1F8AA1A184EE46C4898E414D2677560940FD6D1073E6E62FF18FBEA4FA6A7CCD984427B2ECD1CCA7A3085E381E9FE8C45A9568ED48B3B34E9AA374EDCBAF4BE0A169BEB7D8E1B4970157AD4BB7E1A3B21456C985A5C1BFAA3ACA720296B9248E37F3AB2FE01886936CAB2D62F80F443ECEB4F3D2CEAFADFFA479D31DF127206D7CA65DAA6BCAA5B63B92DA316F46131AFA0B5FA80B0E89C26704F483B60F13BF7B168AA41849302EEC10219104CE1BD80D4A717E3939A33A1EB9896C2A64D1D99117691FD79698F888CC
3E9CCCB058D17DA5BCC438FA3A3E8E9EB2F8D78C50DD46D78FC3039FFBC884AA98F0637E183AA48C2F5016FFB1B481329E38FCC07B335BBB6CD1C96947613543E7F28C600CFC27B1CA661E6EECEF2DD6A9A987B4821E90C738BB62DAC46505F7C2FB16198339CCF5F94421FED1827E214B5D73E38A93938F1EFA7617CBF328CC2659AAFE9456DDE49EADE48B33F365D1098CF475CEC22853770D86E7F110B163E2A1E1B1E9D306910850C17673050FBD4931F769BAC8FB8202DB0A8F077F63443A74915E4371D7ED49E46608687A27FE5287EB43B97EE54505400F9997811C459F3EB3A5FF79759544F234EFD35703A7A5FBAA1C8B28971EE578E9C9B1B9B2E1D56EA939D1A532D7085EE000E38DD6C99EC84120676F31804EB63AE474462FD1965646A968EAD09CA7FB179EEEE5589D07614909198B04416A5D982B317DE3E50198C3A5B0DCF6A2C3F6B7B68F66E833906628F42CD9F57A24F54B04595F8C17EE6E5B8CBCC7118CDF0C087079810915BDD42128227D00C85B50B960009BD6B3ED8C471F24EF35408391F437A00153F3ED0E07935E51BBD7FC18E601134775BBD262C9FB1D9797E6C392599EFA802E62F4AAEB1F0762946691098D7116F7EF18634D2C71146CFA8E1FDD192C0CFDDA567FC104AA6AE66606B168837CB62F92CC7F445E894C095F7D1D701F88AEF0A358E6D90394EDEFCDD8B4E7FA338ACE81D09FA78A2CD20DDB07DFC6CD30EB077DF772694960695E220DCBC0227DC57D50032E8708F155719FB941B73EBBC0B8880E36DEF6634377191F6675B3100469770AA1A6A5AC18EAA097A3E830971D8AEDB23A28ADFA958700740E40C63EDCE21C81C2842CEFC9622BC1D9725C5AF557543B0421182835D874E6C20172506E09FA3A26B480D7B51094B55DA949AF69B5399DBB22A455114555D3A2FEA210F40D52A8CA68CB868A581BD979D62A0664D1FA0F7B7B5DED5208A6F8D2DBDC2B0E31AB480E064C6CF9F93318F8F00D051D6896754D1223860084202731A1C3CBD6103366EF7CFA0BACA3A19C475945694CF080C7041EEE9E8CD6F1380B35D5F35853E5DBF47103BEAE93131BCA560A0A168A2B96DF8FA16030D729ACE6EC965AFE8416F1D3CFE5EB93856434B98294AA022553FDC8B3AFBC5F535D66DB5F210E58E8252AE3801CEF67F6D22B5942B11993E5A12FC6C859124E57C84A9E79B5D426146829902289D5F6C264A7AC97172E14E788727179CAB3391D820DDDDD81F896FC8E88EF92A60881CEA5FC83D043557D9B3EF97349D2B72591FA6B48D83D98AB7060762BA23D834FB70FCDE2009C66B7E7D4D37355DBCC63C4014050817135E7FDF6C15D5887572E034443267AE4B53F14D9EA17BC88E2CE026C009B6BB9510E7B5DBD8BC06BA5F892DABD283673C0BABD285996B31E9074A96CD210803CB9645B6D92
BB0B1FF0D2CDB1DBA8D8A976CE161ADEC470CA0BE34EEF2720A17FB05F534E50E78F85CD3A472FC6A0CF569C27EFFCA0312B8AAEB14D16BCE3F798BD3086CCB030422052D5665C41638B598B51B5D390EDA5FAA6CE29D4B6966A6E525D6D8CE553202AFBCE5BDC2DCE7D185715B8955CCF444D73413DDEF0FB31904E2D5EFB4FDCEFCAD4C3F246E9BDA4FB6FB67D48772232827616A0A4A8E8403D834B21585D9992286523EC6F8B2A21B8C51235A3512D5268F956EB0D89F56B02638F82FF331F1743381237A471B2C4168976C49C9568A5F24290F5C12D93B0F436D84A3C182D125A732BBC5D161D0D299F62D9B79C660B4587858FF95D880FA8F0A4089552C605D7A2131823A03E5F7C3D60C1B79D2B0C83CEEB8B120BEF68C2BAA423F9E972C363416B67786BD4F0D21380514A3A86A7C1BB8261FCAA5BB1EED19FB8A10C8459AC810ECD6109D4EA421653184B90F40B085D580524F296729091C2C24458B4A5F30306AA2D3320770E147607C9F7BE726C5C4B0303F70DC537DDCEF472496F549AEB7E1066A84A947A3E90F9017218448A6EAA60F780385BE27A0C71F9510B42EA966A91CE547B8C378B77AEC8634B963AC69881CE3FE4BDD06C62B6EADCAE71E84251881C16760E76D43A77962D9C4C417AC8987BDA90A16E34689533D2174D4292B448C3715F2596E6E89862B9AD80B0DD81D2B43B480582FF94DC4A158ED9CFDDD8F5CBBE46725F83814E9A0B1FE6A0E6B7B55A33903C914C689657D2FA550333461436ADB754CD5DE419944F0E0FE934AFCE3AF083BF48CAB770CCD52E3E935F6086332ED798FB433EB27972CF3626504CEA422F6E320A5B0E556725C5656B80809ADE9A501B8D416950D763D0533C715189518DBB3B3619A15EFA248E9E762B6667060CCF943CF4E96EB444221CBC9E813767A498EADCB61764613291508037BF28B6B83B2F10B5C41A8CC2555A84E76D4374C0A36F192A179A2F82A3CA46C26B8F82C4E888C3DFAB41516A1AA8C878A9335FA94064C26BAFFD38CE51369036CC1B04D8677257FE425C19A5752FEEF4CA21BECFD1871BC61D8B166DB5D2ACDFB6EA340213FFF90F3230FE0F8CE23483E027A47B3A4CFA0DB1C89ABF8D75DCFB829E860D9F9E999F11C1F381D6EE91E4C2D7EE823AEF2F4FE9FA86CC3894FE20BDA7EB3809F607020053B89BB68E84CA66D36931781E3D860AE25C3E4598FAAF104919DE2EF8EB1B9B2BF9651DDA77AFA6869A37B649226EBE0E948811A89C9130E5151128E53C5A6ADD6EF52F1276195E425FD261AEE4B9099FF59D5AA3DA38A1E9C5B5C2E8D30587C3FF72272466D6CC6FD0EEB34977896B48917208523E5EF21649B44E7999A48B95DE4E0C65697FAD3CDA6B6BBE1882DCAF559A39459DF94938B97EF7696FDA5DEA63DEB55590BCA97A7A5922ECB2FE3DD4F0F0


8569ACD24EE3984FDB84236EA49AB16CC0019C5B4B394B428C2A899BF9987350ABE2E017FFFAE3723B37354CC88776941D5382C24CCFAA616DD216BAE8AF2F85108B9E63E86D0A215E15421A049CBB6AB0ECF0D8D879E919D3891A3C9A8F5394E363503AA2256DB3DC9042ACEC0E606BB4D2664A83A26FE20A02AF7209D0336D76EBD16B055FE472B8C4007A638D1C9C85B91A28A5157044AD0EB150D0B324291548F7A653583EE0495059B572255DBDA7CCFCFD4B2BFD1630D3128A74C99105855628BE3648A43E660B0C2F5FF30727487DDD89984C91ABCD9327C0BD3F18B084E893578D8EC3811D40DB7A582F012FD9D57384DA20D74FB74880AFB895CC0383C47CB88ADDBDC843945207CA258EA659D3FDB321100D084F8322AAB22162B3E2E68FA3C111675F8220D74480D6ED60F24EAABAFFA54639D83F8E5ABDC245CC6E5E772C45585850AA06EBBF3F68E69BD1BF3D4727892EB3BF4B652860A976925E685C12810F015FEC621ACECCEDAEDBB07A71A8392D9F2F4151CA84F7BDC774B933D2FB831AB4BF42D8F617194BA25A9B03F4BF362C788CCB0B64BCD9E04A995396D51BD36FD204357AE6AEAD57D4657A7203CF67D61E69BA4CB67079FC82755FC756932AC1CEAB2CC81A7B6728CE389DD87351652AD4E125532D09F07A7F89E3855C2955C5041D9D8092E917BF71EF4AFB95E0F03DC3BDF9AB8F853108045A76116943470A16C30826A4A72D159475D93A28B1E525DAC8295F01772C461EF3BA9291F12CCB832A4CA94B631139C203AD89EE6CD707C346D47126029F53EB63C4F315EF969202291CC3D8A88DAE032AAEB26DA038F4ED3D79FC6C76887D1BAE552CFCF5482D702E3C4092DC70BF8C8C2407CA2EE64DC2D448EF402AD98AEAEF8AC67C1031E2804F50F449C07A8ABED59EDF2648CCD4D422C877E6E5348819F4F534296426CCA67E961BBDA0B2E140EC3C2038370A9B6228B33AB4C3FB1507D3294723F0316F9FCBF4338B35EC6EC980F2426CE92A2B514762DE01593D1C74038EFCDA0433896D9273D3F72E1B9BDDE738C48B588241E6259E4096B4E68E8AC4190E02BE828DEBEC5547A450E1D8DE553CF95DD832691AFBB45EB91C6794C5C89F2C362E148E8BF7F71AFE639150F24FFFC9BA8AC129CC115F58E41CB030445D3130E84ED2D7C7E51D33E23D1B820AEC85223C52A678DE812CF64FE0EC2EFEDD99533766156570E48752D1ABA68BD420BCB9912D224FCEBF8ADB12BA8D597C8C2246D42B1AB5451778545BD9827ABD0999A4E907FD9ACA6DD0FB7A72D709349A57A2C0269EAA6C8A32F5FB6C9552DA8B35C81F4C3BF0A74C9B4E450AA66AFB210C8007E277590ADE82B97FAA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 182 1536 rc
0 1536 m
182 1536 l
182 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-857.80853 2123.2341 m
1484.7446 2123.2341 l
1484.7446 -1204.4255 l
-857.80853 -1204.4255 l
h
-857.80853 2123.2341 m
f
0.79607898 0.29411799 0.0862744 sc
36 1213 m
170 1213 l
170 1143 l
36 1143 l
h
36 1213 m
f
0.75 w
1 J
1 j
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 -295 m
231 -295 l
231 -225 l
97 -225 l
h
97 -295 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 1178 cm
/F1.1[ 10 0 0 -10 0 0]sf
-30.190001 3.8600006 m
(!"#$%&'\($\)*#)[ 6.480000 5.370000 3.330000 5.370000 8.530000 5.930000 5.560000 2.220000 5.370000 3.150000 5.740000 0.000000 ] xS
0.14902 0.54509801 0.82352901 sc
CM
36 789 m
170 789 l
170 719 l
36 719 l
h
36 789 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 129 m
231 129 l
231 199 l
97 199 l
h
97 129 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 754 cm
-24.809999 3.8600006 m
(+*##"\($\)*#,)[ 7.220000 5.740000 3.330000 3.150000 5.370000 2.220000 5.370000 3.150000 5.740000 3.330000 0.000000 ] xS
0.86274499 0.196079 0.184313 sc
CM
36 1107 m
170 1107 l
170 1037 l
36 1037 l
h
36 1107 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 -189 m
231 -189 l
231 -119 l
97 -119 l
h
97 -189 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 1072 cm
-32.970001 3.8600006 m
(-$./*%0"1\)*#)[ 6.850000 5.370000 5.560000 5.930000 5.740000 8.530000 5.000000 5.370000 5.370000 3.150000 5.740000 0.000000 ] xS
0.70980501 0.53726399 0.0038867299 sc
CM
36 1429 m
170 1429 l
170 1359 l
36 1359 l
h
36 1429 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 -511 m
231 -511 l
231 -441 l
97 -441 l
h
97 -511 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 1394 cm
-25 3.8600006 m
(2\(*&$\(3$\)$)[ 7.590000 2.220000 5.740000 5.930000 5.370000 2.220000 7.040000 5.370000 3.150000 0.000000 ] xS
0.86274499 0.196079 0.184313 sc
CM
24.5 287 m
181.5 287 l
181.5 213 l
24.5 213 l
h
24.5 287 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
85.5 631 m
242.5 631 l
242.5 705 l
85.5 705 l
h
85.5 631 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 250 cm
-73.260002 -2.2799988 m
(-$./*%0"1\)*#44#"$/5#$./*%0"1)[ 6.850000 5.370000 5.560000 5.930000 5.740000 8.530000 5.000000 5.370000 5.370000 3.150000 5.740000 3.330000 2.780000 2.780000 3.150000 5.370000 5.370000 5.930000 5.000000 3.330000 5.370000 5.560000 5.930000 5.740000 8.530000 5.000000 5.370000 0.000000 ] xS
-8.6099997 10 m
(\)*#,)[ 3.150000 5.740000 3.330000 0.000000 ] xS
0.93333399 0.90980399 0.83529401 sc
CM
24.5 1323 m
181.5 1323 l
181.5 1249 l
24.5 1249 l
h
24.5 1323 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
85.5 -405 m
242.5 -405 l
242.5 -331 l
85.5 -331 l
h
85.5 -405 m
S
0.34702 0.43164 0.46015999 sc
0 i
1 0 0 -1 103 1286 cm
-65.565002 3.8600006 m
(2\(*&$\(3$\)$44#"$/56$#$%"\)"#,)[ 7.590000 2.220000 5.740000 5.930000 5.370000 2.220000 7.040000 5.370000 3.150000 5.370000 2.780000 2.780000 3.150000 5.370000 5.370000 5.930000 5.000000 5.930000 5.370000 3.330000 5.370000 8.530000 5.370000 3.150000 5.370000 3.330000 0.000000 ] xS
0.93333399 0.90980399 0.83529401 sc
CM
61 1535 m
145 1535 l
158.80711 1535 170 1523.8071 170 1510 c
170 1490 l
170 1476.1929 158.80711 1465 145 1465 c
61 1465 l
47.192883 1465 36 1476.1929 36 1490 c
36 1510 l
36 1523.8071 47.192883 1535 61 1535 c
h
61 1535 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
122 -617 m
206 -617 l
219.80711 -617 231 -605.80713 231 -592 c
231 -572 l
231 -558.19287 219.80711 -547 206 -547 c
122 -547 l
108.19288 -547 97 -558.19287 97 -572 c
97 -592 l
97 -605.80713 108.19288 -617 122 -617 c
h
122 -617 m
S
0 i
0.82745099 0.21176501 0.50980401 sc
CM
36 1001 m
170 1001 l
170 931 l
36 931 l
h
36 1001 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 -83 m
231 -83 l
231 -13 l
97 -13 l
h
97 -83 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 966 cm
-47.505001 3.8600006 m
(76"#$\)*#,8*#9",*.,)[ 7.600000 5.930000 5.370000 3.330000 5.370000 3.150000 5.740000 3.330000 5.000000 5.740000 5.740000 3.330000 8.710000 5.370000 5.000000 5.740000 5.560000 0.000000 ] xS
0.42353001 0.443138 0.768628 sc
CM
36 895 m
170 895 l
170 825 l
36 825 l
h
36 895 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 23 m
231 23 l
231 93 l
97 93 l
h
97 23 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 860 cm
-23.709999 3.8600006 m
(:'$#;\(<.",)[ 7.600000 5.560000 5.370000 3.330000 5.190000 2.220000 2.220000 5.560000 5.370000 0.000000 ] xS
0.70980501 0.53726399 0.0038867299 sc
CM
36 503 m
170 503 l
170 433 l
36 433 l
h
36 503 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 415 m
231 415 l
231 485 l
97 485 l
h
97 415 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 468 cm
-61.220001 -2.2799988 m
(2\(*&$\(3$\)$44&'<\(/5=75.$%")[ 7.590000 2.220000 5.740000 5.930000 5.370000 2.220000 7.040000 5.370000 3.150000 5.370000 2.780000 2.780000 5.930000 5.560000 2.220000 2.220000 5.930000 5.000000 2.590000 7.600000 5.000000 5.560000 5.370000 8.530000 0.000000 ] xS
-2.5 10 m
(,)s
0.93333399 0.90980399 0.83529401 sc
CM
103 539 m
34 611 l
103 683 l
172 611 l
h
103 539 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
164 379 m
95 307 l
164 235 l
233 307 l
h
164 379 m
S
0.34702 0.43164 0.46015999 sc
0 i
1 0 0 -1 103 611 cm
-17.219999 3.8600006 m
(>*#?1.>@)[ 2.960000 5.740000 3.330000 2.780000 5.370000 5.560000 2.960000 0.000000 ] xS
0.82745099 0.21176501 0.50980401 sc
CM
36 177 m
170 177 l
170 107 l
36 107 l
h
36 177 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 741 m
231 741 l
231 811 l
97 811 l
h
97 741 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 142 cm
-61.490002 -2.2799988 m
(76"#$\)*#,8*#9",*.,441#"$\))[ 7.600000 5.930000 5.370000 3.330000 5.370000 3.150000 5.740000 3.330000 5.000000 5.740000 5.740000 3.330000 8.710000 5.370000 5.000000 5.740000 5.560000 5.000000 2.780000 2.780000 5.370000 3.150000 5.370000 5.370000 0.000000 ] xS
-26.665001 10 m
("5*6"#$\)*#,)[ 5.370000 5.000000 5.740000 5.930000 5.370000 3.330000 5.370000 3.150000 5.740000 3.330000 0.000000 ] xS
0.14902 0.54509801 0.82352901 sc
CM
36 71 m
170 71 l
170 1 l
36 1 l
h
36 71 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
97 847 m
231 847 l
231 917 l
97 917 l
h
97 847 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 36 cm
-46.110001 3.8600006 m
(+*##"\($\)*#,441*.\)#$1\))[ 7.220000 5.740000 3.330000 3.150000 5.370000 2.220000 5.370000 3.150000 5.740000 3.330000 5.000000 2.780000 2.780000 5.370000 5.740000 5.560000 3.150000 3.330000 5.370000 5.370000 0.000000 ] xS
0.79607898 0.29411799 0.0862744 sc
CM
24.5 397 m
181.5 397 l
181.5 323 l
24.5 323 l
h
24.5 397 m
f
0.60000002 i
0.39607799 0.482353 0.513726 sc
1 0 0 -1 -61 918 cm
85.5 521 m
242.5 521 l
242.5 595 l
85.5 595 l
h
85.5 521 m
S
0.99120998 0.96382999 0.88911998 sc
0 i
1 0 0 -1 103 360 cm
-70.760002 -2.2799988 m
(!"#$%&'\($\)*#44#"$/56"#$%&'\($\))[ 6.480000 5.370000 3.330000 5.370000 8.530000 5.930000 5.560000 2.220000 5.370000 3.150000 5.740000 3.330000 2.780000 2.780000 3.150000 5.370000 5.370000 5.930000 5.000000 5.930000 5.370000 3.330000 5.370000 8.530000 5.930000 5.560000 2.220000 5.370000 0.000000 ] xS
-7.0349998 10 m
(*#,)[ 5.740000 3.330000 0.000000 ] xS
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -61 918 cm
164 -517.90002 m
164 -547 l
S
0 i
CM
103 1430.9 m
106 1438.9 l
103 1435.9 l
103 1435.9 l
100 1438.9 l
h
103 1430.9 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 -512.90002 m
167 -520.90002 l
164 -517.90002 l
164 -517.90002 l
161 -520.90002 l
h
164 -512.90002 m
S
1 J
1 j
0.60000002 i
164 -411.89999 m
164 -441 l
S
0 i
CM
103 1324.9 m
106 1332.9 l
103 1329.9 l
103 1329.9 l
100 1332.9 l
h
103 1324.9 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 -406.89999 m
167 -414.89999 l
164 -411.89999 l
164 -411.89999 l
161 -414.89999 l
h
164 -406.89999 m
S
1 J
1 j
0.60000002 i
164 -301.89999 m
164 -331 l
S
0 i
CM
103 1214.9 m
106 1222.9 l
103 1219.9 l
103 1219.9 l
100 1222.9 l
h
103 1214.9 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 -296.89999 m
167 -304.89999 l
164 -301.89999 l
164 -301.89999 l
161 -304.89999 l
h
164 -296.89999 m
S
1 J
1 j
0.60000002 i
164 -195.89999 m
164 -225 l
S
0 i
CM
103 1108.9 m
106 1116.9 l
103 1113.9 l
103 1113.9 l
100 1116.9 l
h
103 1108.9 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 -190.89999 m
167 -198.89999 l
164 -195.89999 l
164 -195.89999 l
161 -198.89999 l
h
164 -190.89999 m
S
1 J
1 j
0.60000002 i
164 -89.900002 m
164 -119 l
S
0 i
CM
103 1002.9 m
106 1010.9 l
103 1007.9 l
103 1007.9 l
100 1010.9 l
h
103 1002.9 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 -84.900002 m
167 -92.900002 l
164 -89.900002 l
164 -89.900002 l
161 -92.900002 l
h
164 -84.900002 m
S
1 J
1 j
0.60000002 i
164 16.1 m
164 -13 l
S
0 i
CM
103 896.90002 m
106 904.90002 l
103 901.90002 l
103 901.90002 l
100 904.90002 l
h
103 896.90002 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 21.1 m
167 13.1 l
164 16.1 l
164 16.1 l
161 13.1 l
h
164 21.1 m
S
1 J
1 j
0.60000002 i
164 122.1 m
164 93 l
S
0 i
CM
103 790.90002 m
106 798.90002 l
103 795.90002 l
103 795.90002 l
100 798.90002 l
h
103 790.90002 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 127.1 m
167 119.1 l
164 122.1 l
164 122.1 l
161 119.1 l
h
164 127.1 m
S
1 J
1 j
0.60000002 i
164 228.10001 m
164 199 l
S
0 i
CM
103 684.90002 m
106 692.90002 l
103 689.90002 l
103 689.90002 l
100 692.90002 l
h
103 684.90002 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 233.10001 m
167 225.10001 l
164 228.10001 l
164 228.10001 l
161 225.10001 l
h
164 233.10001 m
S
1 J
1 j
0.60000002 i
164 408.10001 m
164 379 l
S
0 i
CM
103 504.89999 m
106 512.90002 l
103 509.89999 l
103 509.89999 l
100 512.90002 l
h
103 504.89999 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 413.10001 m
167 405.10001 l
164 408.10001 l
164 408.10001 l
161 405.10001 l
h
164 413.10001 m
S
1 J
1 j
0.60000002 i
164 514.09998 m
164 485 l
S
0 i
CM
103 398.89999 m
106 406.89999 l
103 403.89999 l
103 403.89999 l
100 406.89999 l
h
103 398.89999 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 519.09998 m
167 511.10001 l
164 514.09998 l
164 514.09998 l
161 511.10001 l
h
164 519.09998 m
S
1 J
1 j
0.60000002 i
164 624.09998 m
164 595 l
S
0 i
CM
103 288.89999 m
106 296.89999 l
103 293.89999 l
103 293.89999 l
100 296.89999 l
h
103 288.89999 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 629.09998 m
167 621.09998 l
164 624.09998 l
164 624.09998 l
161 621.09998 l
h
164 629.09998 m
S
1 J
1 j
0.60000002 i
164 734.09998 m
164 705 l
S
0 i
CM
103 178.89999 m
106 186.89999 l
103 183.89999 l
103 183.89999 l
100 186.89999 l
h
103 178.89999 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 739.09998 m
167 731.09998 l
164 734.09998 l
164 734.09998 l
161 731.09998 l
h
164 739.09998 m
S
1 J
1 j
0.60000002 i
164 840.09998 m
164 811 l
S
0 i
CM
103 72.900002 m
106 80.900002 l
103 77.900002 l
103 77.900002 l
100 80.900002 l
h
103 72.900002 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
164 845.09998 m
167 837.09998 l
164 840.09998 l
164 840.09998 l
161 837.09998 l
h
164 845.09998 m
S
1 J
1 j
0.60000002 i
97 882 m
88.099998 882 l
63.115028 882 l
63.115028 671.74817 l
63.115028 307 l
86.099998 307 l
88.099998 307 l
S
0 i
CM
32.099998 611 m
24.1 614 l
27.1 611 l
27.1 611 l
24.1 608 l
h
32.099998 611 m
f
0 J
0 j
1 0 0 -1 -61 918 cm
93.099998 307 m
85.099998 304 l
88.099998 307 l
88.099998 307 l
85.099998 310 l
h
93.099998 307 m
S
ep
end
%%Trailer
%%EOF
